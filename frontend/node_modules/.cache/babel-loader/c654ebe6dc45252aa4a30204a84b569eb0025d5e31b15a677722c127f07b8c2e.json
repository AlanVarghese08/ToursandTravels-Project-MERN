{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\OneDrive\\\\Documents\\\\Tourism-Project-MERN\\\\frontend\\\\src\\\\pages\\\\Userbookings.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { BASE_URL } from \"../utils/config\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Userbookings = () => {\n  _s();\n  const [bookings, setBookings] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const fetchUserBookings = async () => {\n      try {\n        const token = localStorage.getItem(\"accessToken\");\n        const decodedToken = jwt.decode(token); // Use your specific decoding method\n\n        if (!decodedToken || !decodedToken.userId) {\n          console.error(\"User ID not found in the token.\");\n          return;\n        }\n        const userId = decodedToken.userId;\n        const response = await fetch(`${BASE_URL}/booking/${userId}`, {\n          method: \"GET\",\n          credentials: \"include\"\n        });\n        const data = await response.json();\n        if (response.ok) {\n          setBookings(data.data);\n        } else {\n          console.error(\"Error fetching user bookings:\", data.message);\n        }\n        setLoading(false);\n      } catch (error) {\n        console.error(\"Error fetching user bookings:\", error);\n        setLoading(false);\n      }\n    };\n    fetchUserBookings();\n  }, []); // Run this effect only once on mount\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"User Bookings\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), bookings.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No bookings available for this user.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Tour Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Guest Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Booked At\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: bookings.map(booking => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: booking.tourName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: booking.fullName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: booking.date\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: booking.bookAt\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 17\n          }, this)]\n        }, booking._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(Userbookings, \"PE5FI0kJoD0YQqBBR2XHHfm8FkE=\");\n_c = Userbookings;\nexport default Userbookings;\nvar _c;\n$RefreshReg$(_c, \"Userbookings\");","map":{"version":3,"names":["React","useState","useEffect","BASE_URL","Userbookings","bookings","setBookings","loading","setLoading","fetchUserBookings","token","localStorage","getItem","decodedToken","jwt","decode","userId","console","error","response","fetch","method","credentials","data","json","ok","message","length","map","booking","tourName","fullName","date","bookAt","_id"],"sources":["C:/Users/user/OneDrive/Documents/Tourism-Project-MERN/frontend/src/pages/Userbookings.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { BASE_URL } from \"../utils/config\";\r\n\r\nconst Userbookings = () => {\r\n  const [bookings, setBookings] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchUserBookings = async () => {\r\n      try {\r\n        const token = localStorage.getItem(\"accessToken\");\r\n        const decodedToken = jwt.decode(token); // Use your specific decoding method\r\n\r\n        if (!decodedToken || !decodedToken.userId) {\r\n          console.error(\"User ID not found in the token.\");\r\n          return;\r\n        }\r\n\r\n        const userId = decodedToken.userId;\r\n\r\n        const response = await fetch(`${BASE_URL}/booking/${userId}`, {\r\n          method: \"GET\",\r\n          credentials: \"include\",\r\n        });\r\n        const data = await response.json();\r\n\r\n        if (response.ok) {\r\n          setBookings(data.data);\r\n        } else {\r\n          console.error(\"Error fetching user bookings:\", data.message);\r\n        }\r\n\r\n        setLoading(false);\r\n      } catch (error) {\r\n        console.error(\"Error fetching user bookings:\", error);\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchUserBookings();\r\n  }, []); // Run this effect only once on mount\r\n\r\n  if (loading) {\r\n    return <p>Loading...</p>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>User Bookings</h2>\r\n      {bookings.length === 0 ? (\r\n        <p>No bookings available for this user.</p>\r\n      ) : (\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>Tour Name</th>\r\n              <th>Guest Name</th>\r\n              <th>Date</th>\r\n              <th>Booked At</th>\r\n              {/* Add more headers as needed */}\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {bookings.map((booking) => (\r\n              <tr key={booking._id}>\r\n                <td>{booking.tourName}</td>\r\n                <td>{booking.fullName}</td>\r\n                <td>{booking.date}</td>\r\n                <td>{booking.bookAt}</td>\r\n                {/* Add more cells as needed */}\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Userbookings;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}